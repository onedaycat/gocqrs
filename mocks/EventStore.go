// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import gocqrs "github.com/onedaycat/gocqrs"
import mock "github.com/stretchr/testify/mock"

// EventStore is an autogenerated mock type for the EventStore type
type EventStore struct {
	mock.Mock
}

// Get provides a mock function with given fields: aggID, agg
func (_m *EventStore) Get(aggID string, agg gocqrs.AggregateRoot) error {
	ret := _m.Called(aggID, agg)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, gocqrs.AggregateRoot) error); ok {
		r0 = rf(aggID, agg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByAggregateType provides a mock function with given fields: aggType, time
func (_m *EventStore) GetByAggregateType(aggType string, time int64) ([]*gocqrs.EventMessage, error) {
	ret := _m.Called(aggType, time)

	var r0 []*gocqrs.EventMessage
	if rf, ok := ret.Get(0).(func(string, int64) []*gocqrs.EventMessage); ok {
		r0 = rf(aggType, time)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gocqrs.EventMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64) error); ok {
		r1 = rf(aggType, time)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEventType provides a mock function with given fields: eventType, time
func (_m *EventStore) GetByEventType(eventType string, time int64) ([]*gocqrs.EventMessage, error) {
	ret := _m.Called(eventType, time)

	var r0 []*gocqrs.EventMessage
	if rf, ok := ret.Get(0).(func(string, int64) []*gocqrs.EventMessage); ok {
		r0 = rf(eventType, time)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gocqrs.EventMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64) error); ok {
		r1 = rf(eventType, time)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTime provides a mock function with given fields: aggID, time, agg
func (_m *EventStore) GetByTime(aggID string, time int64, agg gocqrs.AggregateRoot) ([]*gocqrs.EventMessage, error) {
	ret := _m.Called(aggID, time, agg)

	var r0 []*gocqrs.EventMessage
	if rf, ok := ret.Get(0).(func(string, int64, gocqrs.AggregateRoot) []*gocqrs.EventMessage); ok {
		r0 = rf(aggID, time, agg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gocqrs.EventMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64, gocqrs.AggregateRoot) error); ok {
		r1 = rf(aggID, time, agg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshot provides a mock function with given fields: aggID, agg
func (_m *EventStore) GetSnapshot(aggID string, agg gocqrs.AggregateRoot) error {
	ret := _m.Called(aggID, agg)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, gocqrs.AggregateRoot) error); ok {
		r0 = rf(aggID, agg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: agg
func (_m *EventStore) Save(agg gocqrs.AggregateRoot) error {
	ret := _m.Called(agg)

	var r0 error
	if rf, ok := ret.Get(0).(func(gocqrs.AggregateRoot) error); ok {
		r0 = rf(agg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
