// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import gocqrs "github.com/onedaycat/gocqrs"
import mock "github.com/stretchr/testify/mock"

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// BeginTx provides a mock function with given fields: fn
func (_m *Storage) BeginTx(fn func(context.Context) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: aggID, seq, limit
func (_m *Storage) Get(aggID string, seq int64, limit int64) ([]*gocqrs.EventMessage, error) {
	ret := _m.Called(aggID, seq, limit)

	var r0 []*gocqrs.EventMessage
	if rf, ok := ret.Get(0).(func(string, int64, int64) []*gocqrs.EventMessage); ok {
		r0 = rf(aggID, seq, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gocqrs.EventMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64, int64) error); ok {
		r1 = rf(aggID, seq, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByAggregateType provides a mock function with given fields: aggType, seq, limit
func (_m *Storage) GetByAggregateType(aggType string, seq int64, limit int64) ([]*gocqrs.EventMessage, error) {
	ret := _m.Called(aggType, seq, limit)

	var r0 []*gocqrs.EventMessage
	if rf, ok := ret.Get(0).(func(string, int64, int64) []*gocqrs.EventMessage); ok {
		r0 = rf(aggType, seq, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gocqrs.EventMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64, int64) error); ok {
		r1 = rf(aggType, seq, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEventType provides a mock function with given fields: eventType, seq, limit
func (_m *Storage) GetByEventType(eventType string, seq int64, limit int64) ([]*gocqrs.EventMessage, error) {
	ret := _m.Called(eventType, seq, limit)

	var r0 []*gocqrs.EventMessage
	if rf, ok := ret.Get(0).(func(string, int64, int64) []*gocqrs.EventMessage); ok {
		r0 = rf(eventType, seq, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gocqrs.EventMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64, int64) error); ok {
		r1 = rf(eventType, seq, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshot provides a mock function with given fields: aggID
func (_m *Storage) GetSnapshot(aggID string) (*gocqrs.Snapshot, error) {
	ret := _m.Called(aggID)

	var r0 *gocqrs.Snapshot
	if rf, ok := ret.Get(0).(func(string) *gocqrs.Snapshot); ok {
		r0 = rf(aggID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocqrs.Snapshot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(aggID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, payloads, snapshot
func (_m *Storage) Save(ctx context.Context, payloads []*gocqrs.EventMessage, snapshot *gocqrs.Snapshot) error {
	ret := _m.Called(ctx, payloads, snapshot)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*gocqrs.EventMessage, *gocqrs.Snapshot) error); ok {
		r0 = rf(ctx, payloads, snapshot)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
